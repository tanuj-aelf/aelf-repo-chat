{
  "name": "aevatar-station",
  "url": "https://github.com/aevatarAI/aevatar-station",
  "branch": "dev",
  "metadata": {
    "full_name": "aevatarAI/aevatar-station",
    "description": "Your all-in-one platform for creating, managing, and deploying AI agents.",
    "stars": 20,
    "forks": 3,
    "language": "C#",
    "topics": [],
    "created_at": "2025-01-07T06:15:34Z",
    "updated_at": "2025-03-10T05:43:35Z",
    "license": "MIT License"
  },
  "readme_content": "# *Aevatar Station*\n\n*Your all-in-one platform for creating, managing, and deploying AI agents.*\n\n---\n## \ud83d\ude80 **Introduction**\n\n**Aevatar Station** is a cutting-edge developer platform designed to simplify the creation, management, and deployment of intelligent AI agents. With a focus on flexibility, scalability, and ease of use, Aevatar Station empowers developers and organizations to harness the power of AI in a streamlined and efficient way.\n\n## Getting Started\n\n### Prerequisites\n\n- .NET 8.0 SDK\n- MongoDB\n- Elasticsearch\n- Redis\n\n## Configuration\n\n1. Update the `appsettings.json` file in the Silo project with your specific configurations (e.g., connection strings, Orleans clustering configurations).\n\n    ```json\n    {\n      \"ConnectionStrings\": {\n        \"Default\": \"mongodb://localhost:27017/Aevatar\"\n      },\n      \"Orleans\": {\n        \"ClusterId\": \"AevatarSiloCluster\",\n        \"ServiceId\": \"AevatarBasicService\",\n        \"AdvertisedIP\": \"127.0.0.1\",\n        \"GatewayPort\": 20001,\n        \"SiloPort\": 10001,\n        \"MongoDBClient\": \"mongodb://localhost:27017/?maxPoolSize=555\",\n        \"DataBase\": \"AevatarDb\",\n        \"DashboardUserName\": \"admin\",\n        \"DashboardPassword\": \"123456\",\n        \"DashboardCounterUpdateIntervalMs\": 1000,\n        \"DashboardPort\": 8080,\n        \"EventStoreConnection\": \"ConnectTo=tcp://localhost:1113; HeartBeatTimeout=500\",\n        \"ClusterDbConnection\": \"127.0.0.1:6379\",\n        \"ClusterDbNumber\": 0,\n        \"GrainStorageDbConnection\": \"127.0.0.1:6379\",\n        \"GrainStorageDbNumber\": 0\n      }\n    }\n    ```\n\n2. Update the `appsettings.json` file in the HttpApi.Host project with your specific configurations (e.g., connection strings, Orleans clustering configurations).\n\n    ```json\n    {\n      \"ConnectionStrings\": {\n        \"Default\": \"mongodb://localhost:27017/Aevatar\"\n      },\n      \"Orleans\": {\n        \"ClusterId\": \"AevatarSiloCluster\",\n        \"ServiceId\": \"AevatarBasicService\",\n        \"MongoDBClient\": \"mongodb://localhost:27017/?maxPoolSize=555\",\n        \"DataBase\": \"AevatarDb\"\n      }\n    }\n    ```\n\n### Running the Application\n\n1. Go to the `src` folder\n    ```shell\n    cd src\n    ```\n2. Run the `Aevatar.DbMigrator` project to create the initial database from `src`.\n    ```shell\n    cd Aevatar.DbMigrator\n    dotnet run\n    ```\n3. Run the `Aevatar.AuthServer` project to create the initial database from `src`.\n    ```shell\n    cd Aevatar.AuthServer\n    dotnet run\n    ```\n4. Run the `Aevatar.Silo` project to start the Orleans Silo from `src`.\n    ```shell\n    cd ../Aevatar.Silo\n    dotnet run\n    ```\n5. Run the `Aevatar.HttpApi.Host` project to start the API from `src`.\n    ```shell\n    cd ../Aevatar.HttpApi.Host\n    dotnet run\n    ```\n## Contributing\n\nIf you encounter a bug or have a feature request, please use the [Issue Tracker](https://github.com/AISmartProject/aevatar-station/issues/new). The project is also open to contributions, so feel free to fork the project and open pull requests.\n\n## License\n\nDistributed under the MIT License. See [License](LICENSE) for more information.",
  "generated_summary": "# Technical Summary: Aevatar Station\n\n## 1. Purpose and Primary Functionality\n**Aevatar Station** is a developer platform designed for creating, managing, and deploying AI agents. It provides tools and infrastructure to streamline the lifecycle of intelligent agents, emphasizing flexibility, scalability, and ease of use. The platform is suitable for organizations and developers aiming to integrate AI solutions efficiently.\n\n---\n\n## 2. Key Features and Components\n- **AI Agent Management**: Tools for creating and managing AI agents.\n- **Deployment Framework**: Simplified deployment of agents using Orleans-based clustering.\n- **Database Migration**: Built-in database migration tools for initial setup.\n- **Authentication Server**: Dedicated authentication service for secure access.\n- **API Hosting**: HTTP API for interfacing with AI agents and services.\n- **Monitoring Dashboard**: Integrated dashboard for monitoring cluster health and performance metrics.\n\n---\n\n## 3. Technical Architecture\nThe architecture is based on **Microsoft Orleans**, a distributed framework for building scalable and fault-tolerant systems. Key components include:\n- **Orleans Silo**: Core service for clustering and grain-based storage.\n- **MongoDB**: Primary database for storing agent-related data.\n- **Redis**: Used for cluster management and grain storage.\n- **Elasticsearch**: Optional dependency for advanced search capabilities.\n- **Event Store**: TCP-based event sourcing for tracking changes and states.\n\n### Configuration Files:\n- `appsettings.json` in the **Silo** and **HttpApi.Host** projects define connection strings, Orleans clustering settings, and database configurations.\n\n---\n\n## 4. Main APIs or Interfaces\n- **HTTP API**: Exposed via the `Aevatar.HttpApi.Host` project, allowing external systems to interact with AI agents and services.\n- **Orleans Grain Interfaces**: Internal API for managing distributed state and operations within the Orleans cluster.\n- **Monitoring Dashboard**: Accessible via the configured dashboard port (default: `8080`) for real-time cluster insights.\n\n---\n\n## 5. Important Technical Details and Dependencies\n### Dependencies:\n- **.NET 8.0 SDK**: Core runtime for building and running the platform.\n- **MongoDB**: Primary database for persistent storage.\n- **Redis**: Used for Orleans clustering and grain storage.\n- **Elasticsearch**: Optional dependency for search functionality.\n- **Event Store**: TCP-based event sourcing for state tracking.\n\n### Configuration Highlights:\n- **Cluster Management**: Redis-based clustering (`ClusterDbConnection` and `ClusterDbNumber`).\n- **Grain Storage**: Redis-based grain storage (`GrainStorageDbConnection` and `GrainStorageDbNumber`).\n- **Dashboard**: Configurable update interval and authentication (`DashboardUserName` and `DashboardPassword`).\n\n### Execution Workflow:\n1. **Database Migration**: Run `Aevatar.DbMigrator` to initialize the database.\n2. **Authentication Server**: Start `Aevatar.AuthServer` for secure access.\n3. **Orleans Silo**: Launch `Aevatar.Silo` for distributed clustering.\n4. **API Hosting**: Start `Aevatar.HttpApi.Host` for external API access.\n\n---\n\n## License\nThe project is distributed under the **MIT License**, allowing open-source contributions and modifications. \n\nFor bug reports or feature requests, use the [Issue Tracker](https://github.com/AISmartProject/aevatar-station/issues/new). Contributions are welcome via pull requests."
}