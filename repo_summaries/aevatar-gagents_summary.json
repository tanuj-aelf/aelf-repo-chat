{
  "name": "aevatar-gagents",
  "url": "https://github.com/aevatarAI/aevatar-gagents",
  "branch": "dev",
  "metadata": {
    "full_name": "aevatarAI/aevatar-gagents",
    "description": null,
    "stars": 6,
    "forks": 3,
    "language": "C#",
    "topics": [],
    "created_at": "2025-01-06T03:04:05Z",
    "updated_at": "2025-03-08T08:21:36Z",
    "license": "MIT License"
  },
  "readme_content": "# aevatar-gagents\n\n## \ud83d\ude80 Introduction\n **Aevatar GAgents** is a custom intelligent agent solution designed to enable developers to customize agents and quickly create, manage, and deploy them on **Aevatar Station**.\n \n## Prerequisites\n### 1. Tech Stack\n- .NET 8.0 SDK\n- ABP 8.2.0\n- Orleans 7.0\n- Orleans Event Sourcing\n- Orleans Stream\n### 2. Dependency package\n- dotnet add package Aevatar.Core --version 1.0.2 --source https://www.myget.org/F/aelf-project-dev/api/v3/index.json\n- dotnet add package Aevatar.EventSourcing.Core --version 1.0.2 --source https://www.myget.org/F/aelf-project-dev/api/v3/index.json\n- dotnet add package Aevatar.Core.Abstractions --version 1.0.2 --source https://www.myget.org/F/aelf-project-dev/api/v3/index.json\n\n## How to create an Agent?\n\n### 1. Create a class for Agent storage, and the class must inherit from StateBase.\n**For example:**\n```csharp\n[GenerateSerializer]\npublic class TwitterGAgentState : StateBase\n{\n    [Id(0)] public Guid Id { get; set; } = Guid.NewGuid();\n    [Id(1)] public string UserId { get; set; }\n    [Id(2)] public string Token { get; set; }\n    [Id(3)] public string TokenSecret { get; set; }\n    [Id(4)] public Dictionary<string, string> RepliedTweets { get; set; }\n    [Id(5)] public string UserName { get; set; }\n    ....\n}\n```\n\n### 2. Create a class for EventSourcing **RaiseEvent**,and the class must inherit from SEventBase.\n**For example:**\n```csharp\npublic class TweetGEvent : SEventBase\n{\n    [Id(0)] public string Text { get; set; }\n}\n```\n\n### 3. Create a class for the Agent to receive external messages. and the class must inherit from EventBase.\n**For example:**\n```csharp\n[GenerateSerializer]\npublic class CreateTweetGEvent:EventBase\n{\n    [Id(0)]  public string Text { get; set; }\n}\n```\n\u26a0\ufe0f\u26a0\ufe0f '[GenerateSerializer]' GenerateSerializerAttribute and \u2018[Id(0)]\u2019 IdAttribute is necessary.\u26a0\ufe0f\u26a0\ufe0f\n\n### 4. Create an Agent and inherit from GAgentBase<TState, TEvent>\n**For example:**\n``` csharp\n[StorageProvider(ProviderName = \"PubSubStore\")]\n[LogConsistencyProvider(ProviderName = \"LogStorage\")]\npublic class TwitterGAgent : GAgentBase<TwitterGAgentState, TweetGEvent>, ITwitterGAgent\n{\n    private readonly ILogger<TwitterGAgent> _logger;\n\n    public TwitterGAgent(ILogger<TwitterGAgent> logger) : base(logger)\n    {\n        _logger = logger;\n    }\n    \n    [EventHandler]\n    public async Task HandleEventAsync(CreateTweetGEvent @event)\n    {\n        _logger.LogDebug(\"HandleEventAsync CreateTweetEvent, text: {text}\", @event.Text);\n        if (@event.Text.IsNullOrEmpty())\n        {\n            return;\n        }\n        \n        if (State.UserId.IsNullOrEmpty())\n        {\n            _logger.LogDebug(\"HandleEventAsync SocialResponseEvent null userId\");\n            return;\n        }\n        \n        await PublishAsync(new SocialGEvent()\n        {\n            Content = @event.Text\n        });\n    }\n}\n```\nExplanation:\n- TwitterGAgentState: Data that needs to be stored by TwitterGAgent\n- TweetGEvent: Types of Event Sourcing\n- Function 'HandleEventAsync(CreateTweetGEvent @event)' Used to handle 'CreateTweetGEvent'.\n\u26a0\ufe0f\u26a0\ufe0f'[EventHandler]\u2018 EventHandlerAttribute is necessary \u26a0\ufe0f\u26a0\ufe0f\n\n## License\nDistributed under the MIT License. See [License](LICENSE) for more information.",
  "generated_summary": "```markdown\n# Technical Summary: Aevatar GAgents\n\n## 1. Purpose and Primary Functionality\n**Aevatar GAgents** is a customizable intelligent agent framework designed to help developers create, manage, and deploy agents on the **Aevatar Station** platform. It leverages event sourcing and stream processing to handle agent state and interactions efficiently, enabling developers to build scalable, stateful, and event-driven agents.\n\n---\n\n## 2. Key Features and Components\n- **Customizable Agent Creation**: Developers can define agent-specific states, events, and behaviors.\n- **Event Sourcing**: Supports capturing and replaying state changes using Orleans Event Sourcing.\n- **Stream Processing**: Integrates with Orleans Streams for real-time message handling.\n- **State Management**: Agents persist state using `StateBase` inheritance.\n- **Event Handling**: Agents process external events via `EventBase` and internal state changes via `SEventBase`.\n- **Logging and Debugging**: Built-in logging support using `ILogger`.\n\n---\n\n## 3. Technical Architecture\nThe framework is built on the following technologies:\n- **.NET 8.0 SDK**: Core runtime for the application.\n- **ABP Framework 8.2.0**: Modular application framework for infrastructure and dependency injection.\n- **Orleans 7.0**: Distributed virtual actor model for stateful and scalable agent management.\n- **Orleans Event Sourcing**: Manages state changes as events for replayability and consistency.\n- **Orleans Streams**: Facilitates real-time communication between agents and external systems.\n\nAgents are implemented as classes inheriting from `GAgentBase<TState, TEvent>`, where:\n- `TState` defines the agent's persistent state.\n- `TEvent` defines the event types for state transitions.\n\n---\n\n## 4. Main APIs or Interfaces\n- **StateBase**: Base class for defining agent-specific state.\n- **SEventBase**: Base class for event sourcing types.\n- **EventBase**: Base class for external events received by agents.\n- **GAgentBase<TState, TEvent>**: Core agent class for implementing custom agents.\n- **EventHandler Attribute**: Marks methods that handle specific events.\n- **StorageProvider and LogConsistencyProvider Attributes**: Configure storage and consistency mechanisms for agents.\n\nExample Agent Workflow:\n1. Define the agent's state by inheriting from `StateBase`.\n2. Define event sourcing types by inheriting from `SEventBase`.\n3. Define external events by inheriting from `EventBase`.\n4. Implement the agent by inheriting from `GAgentBase<TState, TEvent>` and defining event handlers.\n\n---\n\n## 5. Important Technical Details and Dependencies\n### Prerequisites:\n- **.NET 8.0 SDK**: Required for development.\n- **ABP 8.2.0**, **Orleans 7.0**, **Orleans Event Sourcing**, **Orleans Streams**: Core frameworks for agent functionality.\n\n### Dependency Packages:\n- `Aevatar.Core` (v1.0.2)\n- `Aevatar.EventSourcing.Core` (v1.0.2)\n- `Aevatar.Core.Abstractions` (v1.0.2)  \nAll dependencies are hosted on a private NuGet feed: `https://www.myget.org/F/aelf-project-dev/api/v3/index.json`.\n\n### Key Attributes:\n- `[GenerateSerializer]` and `[Id(x)]`: Required for serialization of state and events.\n- `[EventHandler]`: Required for event-handling methods.\n- `[StorageProvider]` and `[LogConsistencyProvider]`: Configure storage and logging for agents.\n\n---\n\n## License\nThe project is distributed under the MIT License.\n```"
}