{
  "name": "aevatar-framework",
  "url": "https://github.com/aevatarAI/aevatar-framework",
  "branch": "dev",
  "metadata": {
    "full_name": "aevatarAI/aevatar-framework",
    "description": "A distributed actor-based framework built on Microsoft Orleans for building scalable event-sourced applications.",
    "stars": 34,
    "forks": 5,
    "language": "C#",
    "topics": [],
    "created_at": "2025-01-03T10:08:40Z",
    "updated_at": "2025-03-13T01:15:14Z",
    "license": "MIT License"
  },
  "readme_content": "# aevatar Framework\n\nA distributed actor-based framework built on Microsoft Orleans for building scalable event-sourced applications.\n\n## Overview\n\nThe GAgent Framework provides a base implementation for creating distributed agents (actors) that support:\n- Event sourcing\n- Pub/sub messaging\n- State management\n- Hierarchical agent relationships\n\n## Core Components\n\n### GAgentBase\n\nThe `GAgentBase<TState, TEvent>` class is the foundation of the framework, providing:\n\n- **Event Sourcing**: Built on Orleans' `JournaledGrain` for reliable event storage and replay\n- **State Management**: Manages agent state with automatic persistence\n- **Event Publishing**: Supports publishing and subscribing to events between agents\n- **Hierarchical Structure**: Allows agents to register with and subscribe to other agents\n\n### Key Features\n\n1. **Event Handling**\n   - Automatic event forwarding\n   - Custom event handler registration\n   - Support for base and specialized event handlers\n\n2. **State Management**\n   - Strongly-typed state containers\n   - Automatic state persistence\n   - State change notifications\n\n3. **Agent Registration**\n   - Dynamic agent registration/unregistration\n   - Hierarchical agent relationships\n   - Subscription management\n\n4. **Stream Processing**\n   - Built-in stream provider integration\n   - Automatic stream subscription management\n   - Event forwarding capabilities\n\n## Usage\n\n### Creating a New Agent\n```csharp\n[GAgent]\npublic class MyAgent : GAgentBase<MyState, MyEvent>\n{\n    public MyAgent(ILogger logger) : base(logger)\n    {\n    }\n\n    public override async Task<string> GetDescriptionAsync()\n    {\n        return \"My Custom Agent\";\n    }\n}\n```\n\n### Event Handling\n```csharp\n[EventHandler]\npublic async Task HandleCustomEventAsync(CustomEvent event)\n{\n    // Handle the event\n}\n```\n\n### Agent Registration\n```csharp\nawait agent.RegisterAsync(otherAgent);\n```\n\n## Best Practices\n\n1. Always inherit from `GAgentBase` when creating new agents\n1. Implement proper error handling in event handlers\n1. Use strongly-typed events and states\n1. Properly manage registrations\n\n## Contributing\n\nIf you encounter a bug or have a feature request, please use the [Issue Tracker](https://github.com/AISmartProject/aevatar-framework/issues/new). The project is also open to contributions, so feel free to fork the project and open pull requests.\n\n## License\n\nDistributed under the Apache License. See [License](LICENSE) for more information.\nDistributed under the MIT License. See [License](LICENSE) for more information.",
  "generated_summary": "```markdown\n# Technical Summary: aevatar-framework\n\n## 1. Purpose and Primary Functionality\nThe `aevatar-framework` is a distributed actor-based framework designed for building scalable, event-sourced applications. It leverages Microsoft Orleans to provide a robust foundation for creating distributed agents (actors) with features such as event sourcing, state management, pub/sub messaging, and hierarchical agent relationships.\n\n## 2. Key Features and Components\n\n### Core Features\n- **Event Sourcing**: Built on Orleans' `JournaledGrain` for reliable event storage and replay.\n- **State Management**: Strongly-typed state containers with automatic persistence and change notifications.\n- **Pub/Sub Messaging**: Event publishing and subscription between agents with built-in stream processing.\n- **Hierarchical Agent Relationships**: Dynamic agent registration/unregistration and parent-child agent structures.\n\n### Core Components\n- **`GAgentBase<TState, TEvent>`**: The base class for creating agents, providing:\n  - Event handling with automatic forwarding and custom handler registration.\n  - State management with automatic persistence and notifications.\n  - Integration with Orleans' stream providers for event forwarding and subscription management.\n\n## 3. Technical Architecture\nThe framework is built on Microsoft Orleans, a virtual actor model for distributed systems. Key architectural elements include:\n- **Actors (Agents)**: Represented as grains in Orleans, each agent is an independent unit of computation with its own state and event handling logic.\n- **Event Sourcing**: Events are stored and replayed using Orleans' `JournaledGrain`, ensuring reliability and consistency.\n- **Stream Processing**: Built-in stream provider integration for inter-agent communication and event forwarding.\n- **Hierarchical Structure**: Agents can register with and subscribe to other agents, forming a tree-like structure for complex workflows.\n\n## 4. Main APIs or Interfaces\n\n### Agent Creation\nAgents are created by inheriting from `GAgentBase<TState, TEvent>`:\n```csharp\n[GAgent]\npublic class MyAgent : GAgentBase<MyState, MyEvent>\n{\n    public MyAgent(ILogger logger) : base(logger) { }\n    public override async Task<string> GetDescriptionAsync() => \"My Custom Agent\";\n}\n```\n\n### Event Handling\nCustom event handlers can be registered using the `[EventHandler]` attribute:\n```csharp\n[EventHandler]\npublic async Task HandleCustomEventAsync(CustomEvent event)\n{\n    // Handle the event\n}\n```\n\n### Agent Registration\nAgents can dynamically register and subscribe to other agents:\n```csharp\nawait agent.RegisterAsync(otherAgent);\n```\n\n## 5. Important Technical Details and Dependencies\n- **Primary Language**: C#\n- **Framework**: Built on Microsoft Orleans for distributed actor management.\n- **Dependencies**:\n  - Orleans for actor-based distributed computing.\n  - Logging via `ILogger` for debugging and monitoring.\n- **Event and State Management**:\n  - Strongly-typed events and states are recommended for type safety and maintainability.\n  - Automatic persistence and replay of state changes using Orleans' journaling capabilities.\n- **Stream Integration**: Built-in support for stream providers simplifies event forwarding and subscription management.\n\n## License\nThe project is distributed under the Apache License. See the [License](LICENSE) file for details.\n\n## Contribution\nContributions are welcome via the [Issue Tracker](https://github.com/AISmartProject/aevatar-framework/issues/new) and pull requests.\n\n```"
}