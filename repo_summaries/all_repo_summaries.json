{
  "aevatar-framework": {
    "name": "aevatar-framework",
    "url": "https://github.com/aevatarAI/aevatar-framework",
    "branch": "dev",
    "metadata": {
      "full_name": "aevatarAI/aevatar-framework",
      "description": "A distributed actor-based framework built on Microsoft Orleans for building scalable event-sourced applications.",
      "stars": 34,
      "forks": 5,
      "language": "C#",
      "topics": [],
      "created_at": "2025-01-03T10:08:40Z",
      "updated_at": "2025-03-13T01:15:14Z",
      "license": "MIT License"
    },
    "readme_content": "# aevatar Framework\n\nA distributed actor-based framework built on Microsoft Orleans for building scalable event-sourced applications.\n\n## Overview\n\nThe GAgent Framework provides a base implementation for creating distributed agents (actors) that support:\n- Event sourcing\n- Pub/sub messaging\n- State management\n- Hierarchical agent relationships\n\n## Core Components\n\n### GAgentBase\n\nThe `GAgentBase<TState, TEvent>` class is the foundation of the framework, providing:\n\n- **Event Sourcing**: Built on Orleans' `JournaledGrain` for reliable event storage and replay\n- **State Management**: Manages agent state with automatic persistence\n- **Event Publishing**: Supports publishing and subscribing to events between agents\n- **Hierarchical Structure**: Allows agents to register with and subscribe to other agents\n\n### Key Features\n\n1. **Event Handling**\n   - Automatic event forwarding\n   - Custom event handler registration\n   - Support for base and specialized event handlers\n\n2. **State Management**\n   - Strongly-typed state containers\n   - Automatic state persistence\n   - State change notifications\n\n3. **Agent Registration**\n   - Dynamic agent registration/unregistration\n   - Hierarchical agent relationships\n   - Subscription management\n\n4. **Stream Processing**\n   - Built-in stream provider integration\n   - Automatic stream subscription management\n   - Event forwarding capabilities\n\n## Usage\n\n### Creating a New Agent\n```csharp\n[GAgent]\npublic class MyAgent : GAgentBase<MyState, MyEvent>\n{\n    public MyAgent(ILogger logger) : base(logger)\n    {\n    }\n\n    public override async Task<string> GetDescriptionAsync()\n    {\n        return \"My Custom Agent\";\n    }\n}\n```\n\n### Event Handling\n```csharp\n[EventHandler]\npublic async Task HandleCustomEventAsync(CustomEvent event)\n{\n    // Handle the event\n}\n```\n\n### Agent Registration\n```csharp\nawait agent.RegisterAsync(otherAgent);\n```\n\n## Best Practices\n\n1. Always inherit from `GAgentBase` when creating new agents\n1. Implement proper error handling in event handlers\n1. Use strongly-typed events and states\n1. Properly manage registrations\n\n## Contributing\n\nIf you encounter a bug or have a feature request, please use the [Issue Tracker](https://github.com/AISmartProject/aevatar-framework/issues/new). The project is also open to contributions, so feel free to fork the project and open pull requests.\n\n## License\n\nDistributed under the Apache License. See [License](LICENSE) for more information.\nDistributed under the MIT License. See [License](LICENSE) for more information.",
    "generated_summary": "```markdown\n# Technical Summary: aevatar-framework\n\n## 1. Purpose and Primary Functionality\nThe `aevatar-framework` is a distributed actor-based framework designed for building scalable, event-sourced applications. It leverages Microsoft Orleans to provide a robust foundation for creating distributed agents (actors) with features such as event sourcing, state management, pub/sub messaging, and hierarchical agent relationships.\n\n## 2. Key Features and Components\n\n### Core Features\n- **Event Sourcing**: Built on Orleans' `JournaledGrain` for reliable event storage and replay.\n- **State Management**: Strongly-typed state containers with automatic persistence and change notifications.\n- **Pub/Sub Messaging**: Event publishing and subscription between agents with built-in stream processing.\n- **Hierarchical Agent Relationships**: Dynamic agent registration/unregistration and parent-child agent structures.\n\n### Core Components\n- **`GAgentBase<TState, TEvent>`**: The base class for creating agents, providing:\n  - Event handling with automatic forwarding and custom handler registration.\n  - State management with automatic persistence and notifications.\n  - Integration with Orleans' stream providers for event forwarding and subscription management.\n\n## 3. Technical Architecture\nThe framework is built on Microsoft Orleans, a virtual actor model for distributed systems. Key architectural elements include:\n- **Actors (Agents)**: Represented as grains in Orleans, each agent is an independent unit of computation with its own state and event handling logic.\n- **Event Sourcing**: Events are stored and replayed using Orleans' `JournaledGrain`, ensuring reliability and consistency.\n- **Stream Processing**: Built-in stream provider integration for inter-agent communication and event forwarding.\n- **Hierarchical Structure**: Agents can register with and subscribe to other agents, forming a tree-like structure for complex workflows.\n\n## 4. Main APIs or Interfaces\n\n### Agent Creation\nAgents are created by inheriting from `GAgentBase<TState, TEvent>`:\n```csharp\n[GAgent]\npublic class MyAgent : GAgentBase<MyState, MyEvent>\n{\n    public MyAgent(ILogger logger) : base(logger) { }\n    public override async Task<string> GetDescriptionAsync() => \"My Custom Agent\";\n}\n```\n\n### Event Handling\nCustom event handlers can be registered using the `[EventHandler]` attribute:\n```csharp\n[EventHandler]\npublic async Task HandleCustomEventAsync(CustomEvent event)\n{\n    // Handle the event\n}\n```\n\n### Agent Registration\nAgents can dynamically register and subscribe to other agents:\n```csharp\nawait agent.RegisterAsync(otherAgent);\n```\n\n## 5. Important Technical Details and Dependencies\n- **Primary Language**: C#\n- **Framework**: Built on Microsoft Orleans for distributed actor management.\n- **Dependencies**:\n  - Orleans for actor-based distributed computing.\n  - Logging via `ILogger` for debugging and monitoring.\n- **Event and State Management**:\n  - Strongly-typed events and states are recommended for type safety and maintainability.\n  - Automatic persistence and replay of state changes using Orleans' journaling capabilities.\n- **Stream Integration**: Built-in support for stream providers simplifies event forwarding and subscription management.\n\n## License\nThe project is distributed under the Apache License. See the [License](LICENSE) file for details.\n\n## Contribution\nContributions are welcome via the [Issue Tracker](https://github.com/AISmartProject/aevatar-framework/issues/new) and pull requests.\n\n```"
  },
  "aevatar-station": {
    "name": "aevatar-station",
    "url": "https://github.com/aevatarAI/aevatar-station",
    "branch": "dev",
    "metadata": {
      "full_name": "aevatarAI/aevatar-station",
      "description": "Your all-in-one platform for creating, managing, and deploying AI agents.",
      "stars": 20,
      "forks": 3,
      "language": "C#",
      "topics": [],
      "created_at": "2025-01-07T06:15:34Z",
      "updated_at": "2025-03-10T05:43:35Z",
      "license": "MIT License"
    },
    "readme_content": "# *Aevatar Station*\n\n*Your all-in-one platform for creating, managing, and deploying AI agents.*\n\n---\n## \ud83d\ude80 **Introduction**\n\n**Aevatar Station** is a cutting-edge developer platform designed to simplify the creation, management, and deployment of intelligent AI agents. With a focus on flexibility, scalability, and ease of use, Aevatar Station empowers developers and organizations to harness the power of AI in a streamlined and efficient way.\n\n## Getting Started\n\n### Prerequisites\n\n- .NET 8.0 SDK\n- MongoDB\n- Elasticsearch\n- Redis\n\n## Configuration\n\n1. Update the `appsettings.json` file in the Silo project with your specific configurations (e.g., connection strings, Orleans clustering configurations).\n\n    ```json\n    {\n      \"ConnectionStrings\": {\n        \"Default\": \"mongodb://localhost:27017/Aevatar\"\n      },\n      \"Orleans\": {\n        \"ClusterId\": \"AevatarSiloCluster\",\n        \"ServiceId\": \"AevatarBasicService\",\n        \"AdvertisedIP\": \"127.0.0.1\",\n        \"GatewayPort\": 20001,\n        \"SiloPort\": 10001,\n        \"MongoDBClient\": \"mongodb://localhost:27017/?maxPoolSize=555\",\n        \"DataBase\": \"AevatarDb\",\n        \"DashboardUserName\": \"admin\",\n        \"DashboardPassword\": \"123456\",\n        \"DashboardCounterUpdateIntervalMs\": 1000,\n        \"DashboardPort\": 8080,\n        \"EventStoreConnection\": \"ConnectTo=tcp://localhost:1113; HeartBeatTimeout=500\",\n        \"ClusterDbConnection\": \"127.0.0.1:6379\",\n        \"ClusterDbNumber\": 0,\n        \"GrainStorageDbConnection\": \"127.0.0.1:6379\",\n        \"GrainStorageDbNumber\": 0\n      }\n    }\n    ```\n\n2. Update the `appsettings.json` file in the HttpApi.Host project with your specific configurations (e.g., connection strings, Orleans clustering configurations).\n\n    ```json\n    {\n      \"ConnectionStrings\": {\n        \"Default\": \"mongodb://localhost:27017/Aevatar\"\n      },\n      \"Orleans\": {\n        \"ClusterId\": \"AevatarSiloCluster\",\n        \"ServiceId\": \"AevatarBasicService\",\n        \"MongoDBClient\": \"mongodb://localhost:27017/?maxPoolSize=555\",\n        \"DataBase\": \"AevatarDb\"\n      }\n    }\n    ```\n\n### Running the Application\n\n1. Go to the `src` folder\n    ```shell\n    cd src\n    ```\n2. Run the `Aevatar.DbMigrator` project to create the initial database from `src`.\n    ```shell\n    cd Aevatar.DbMigrator\n    dotnet run\n    ```\n3. Run the `Aevatar.AuthServer` project to create the initial database from `src`.\n    ```shell\n    cd Aevatar.AuthServer\n    dotnet run\n    ```\n4. Run the `Aevatar.Silo` project to start the Orleans Silo from `src`.\n    ```shell\n    cd ../Aevatar.Silo\n    dotnet run\n    ```\n5. Run the `Aevatar.HttpApi.Host` project to start the API from `src`.\n    ```shell\n    cd ../Aevatar.HttpApi.Host\n    dotnet run\n    ```\n## Contributing\n\nIf you encounter a bug or have a feature request, please use the [Issue Tracker](https://github.com/AISmartProject/aevatar-station/issues/new). The project is also open to contributions, so feel free to fork the project and open pull requests.\n\n## License\n\nDistributed under the MIT License. See [License](LICENSE) for more information.",
    "generated_summary": "# Technical Summary: Aevatar Station\n\n## 1. Purpose and Primary Functionality\n**Aevatar Station** is a developer platform designed for creating, managing, and deploying AI agents. It provides tools and infrastructure to streamline the lifecycle of intelligent agents, emphasizing flexibility, scalability, and ease of use. The platform is suitable for organizations and developers aiming to integrate AI solutions efficiently.\n\n---\n\n## 2. Key Features and Components\n- **AI Agent Management**: Tools for creating and managing AI agents.\n- **Deployment Framework**: Simplified deployment of agents using Orleans-based clustering.\n- **Database Migration**: Built-in database migration tools for initial setup.\n- **Authentication Server**: Dedicated authentication service for secure access.\n- **API Hosting**: HTTP API for interfacing with AI agents and services.\n- **Monitoring Dashboard**: Integrated dashboard for monitoring cluster health and performance metrics.\n\n---\n\n## 3. Technical Architecture\nThe architecture is based on **Microsoft Orleans**, a distributed framework for building scalable and fault-tolerant systems. Key components include:\n- **Orleans Silo**: Core service for clustering and grain-based storage.\n- **MongoDB**: Primary database for storing agent-related data.\n- **Redis**: Used for cluster management and grain storage.\n- **Elasticsearch**: Optional dependency for advanced search capabilities.\n- **Event Store**: TCP-based event sourcing for tracking changes and states.\n\n### Configuration Files:\n- `appsettings.json` in the **Silo** and **HttpApi.Host** projects define connection strings, Orleans clustering settings, and database configurations.\n\n---\n\n## 4. Main APIs or Interfaces\n- **HTTP API**: Exposed via the `Aevatar.HttpApi.Host` project, allowing external systems to interact with AI agents and services.\n- **Orleans Grain Interfaces**: Internal API for managing distributed state and operations within the Orleans cluster.\n- **Monitoring Dashboard**: Accessible via the configured dashboard port (default: `8080`) for real-time cluster insights.\n\n---\n\n## 5. Important Technical Details and Dependencies\n### Dependencies:\n- **.NET 8.0 SDK**: Core runtime for building and running the platform.\n- **MongoDB**: Primary database for persistent storage.\n- **Redis**: Used for Orleans clustering and grain storage.\n- **Elasticsearch**: Optional dependency for search functionality.\n- **Event Store**: TCP-based event sourcing for state tracking.\n\n### Configuration Highlights:\n- **Cluster Management**: Redis-based clustering (`ClusterDbConnection` and `ClusterDbNumber`).\n- **Grain Storage**: Redis-based grain storage (`GrainStorageDbConnection` and `GrainStorageDbNumber`).\n- **Dashboard**: Configurable update interval and authentication (`DashboardUserName` and `DashboardPassword`).\n\n### Execution Workflow:\n1. **Database Migration**: Run `Aevatar.DbMigrator` to initialize the database.\n2. **Authentication Server**: Start `Aevatar.AuthServer` for secure access.\n3. **Orleans Silo**: Launch `Aevatar.Silo` for distributed clustering.\n4. **API Hosting**: Start `Aevatar.HttpApi.Host` for external API access.\n\n---\n\n## License\nThe project is distributed under the **MIT License**, allowing open-source contributions and modifications. \n\nFor bug reports or feature requests, use the [Issue Tracker](https://github.com/AISmartProject/aevatar-station/issues/new). Contributions are welcome via pull requests."
  },
  "aevatar-gagents": {
    "name": "aevatar-gagents",
    "url": "https://github.com/aevatarAI/aevatar-gagents",
    "branch": "dev",
    "metadata": {
      "full_name": "aevatarAI/aevatar-gagents",
      "description": null,
      "stars": 6,
      "forks": 3,
      "language": "C#",
      "topics": [],
      "created_at": "2025-01-06T03:04:05Z",
      "updated_at": "2025-03-08T08:21:36Z",
      "license": "MIT License"
    },
    "readme_content": "# aevatar-gagents\n\n## \ud83d\ude80 Introduction\n **Aevatar GAgents** is a custom intelligent agent solution designed to enable developers to customize agents and quickly create, manage, and deploy them on **Aevatar Station**.\n \n## Prerequisites\n### 1. Tech Stack\n- .NET 8.0 SDK\n- ABP 8.2.0\n- Orleans 7.0\n- Orleans Event Sourcing\n- Orleans Stream\n### 2. Dependency package\n- dotnet add package Aevatar.Core --version 1.0.2 --source https://www.myget.org/F/aelf-project-dev/api/v3/index.json\n- dotnet add package Aevatar.EventSourcing.Core --version 1.0.2 --source https://www.myget.org/F/aelf-project-dev/api/v3/index.json\n- dotnet add package Aevatar.Core.Abstractions --version 1.0.2 --source https://www.myget.org/F/aelf-project-dev/api/v3/index.json\n\n## How to create an Agent?\n\n### 1. Create a class for Agent storage, and the class must inherit from StateBase.\n**For example:**\n```csharp\n[GenerateSerializer]\npublic class TwitterGAgentState : StateBase\n{\n    [Id(0)] public Guid Id { get; set; } = Guid.NewGuid();\n    [Id(1)] public string UserId { get; set; }\n    [Id(2)] public string Token { get; set; }\n    [Id(3)] public string TokenSecret { get; set; }\n    [Id(4)] public Dictionary<string, string> RepliedTweets { get; set; }\n    [Id(5)] public string UserName { get; set; }\n    ....\n}\n```\n\n### 2. Create a class for EventSourcing **RaiseEvent**,and the class must inherit from SEventBase.\n**For example:**\n```csharp\npublic class TweetGEvent : SEventBase\n{\n    [Id(0)] public string Text { get; set; }\n}\n```\n\n### 3. Create a class for the Agent to receive external messages. and the class must inherit from EventBase.\n**For example:**\n```csharp\n[GenerateSerializer]\npublic class CreateTweetGEvent:EventBase\n{\n    [Id(0)]  public string Text { get; set; }\n}\n```\n\u26a0\ufe0f\u26a0\ufe0f '[GenerateSerializer]' GenerateSerializerAttribute and \u2018[Id(0)]\u2019 IdAttribute is necessary.\u26a0\ufe0f\u26a0\ufe0f\n\n### 4. Create an Agent and inherit from GAgentBase<TState, TEvent>\n**For example:**\n``` csharp\n[StorageProvider(ProviderName = \"PubSubStore\")]\n[LogConsistencyProvider(ProviderName = \"LogStorage\")]\npublic class TwitterGAgent : GAgentBase<TwitterGAgentState, TweetGEvent>, ITwitterGAgent\n{\n    private readonly ILogger<TwitterGAgent> _logger;\n\n    public TwitterGAgent(ILogger<TwitterGAgent> logger) : base(logger)\n    {\n        _logger = logger;\n    }\n    \n    [EventHandler]\n    public async Task HandleEventAsync(CreateTweetGEvent @event)\n    {\n        _logger.LogDebug(\"HandleEventAsync CreateTweetEvent, text: {text}\", @event.Text);\n        if (@event.Text.IsNullOrEmpty())\n        {\n            return;\n        }\n        \n        if (State.UserId.IsNullOrEmpty())\n        {\n            _logger.LogDebug(\"HandleEventAsync SocialResponseEvent null userId\");\n            return;\n        }\n        \n        await PublishAsync(new SocialGEvent()\n        {\n            Content = @event.Text\n        });\n    }\n}\n```\nExplanation:\n- TwitterGAgentState: Data that needs to be stored by TwitterGAgent\n- TweetGEvent: Types of Event Sourcing\n- Function 'HandleEventAsync(CreateTweetGEvent @event)' Used to handle 'CreateTweetGEvent'.\n\u26a0\ufe0f\u26a0\ufe0f'[EventHandler]\u2018 EventHandlerAttribute is necessary \u26a0\ufe0f\u26a0\ufe0f\n\n## License\nDistributed under the MIT License. See [License](LICENSE) for more information.",
    "generated_summary": "```markdown\n# Technical Summary: Aevatar GAgents\n\n## 1. Purpose and Primary Functionality\n**Aevatar GAgents** is a customizable intelligent agent framework designed to help developers create, manage, and deploy agents on the **Aevatar Station** platform. It leverages event sourcing and stream processing to handle agent state and interactions efficiently, enabling developers to build scalable, stateful, and event-driven agents.\n\n---\n\n## 2. Key Features and Components\n- **Customizable Agent Creation**: Developers can define agent-specific states, events, and behaviors.\n- **Event Sourcing**: Supports capturing and replaying state changes using Orleans Event Sourcing.\n- **Stream Processing**: Integrates with Orleans Streams for real-time message handling.\n- **State Management**: Agents persist state using `StateBase` inheritance.\n- **Event Handling**: Agents process external events via `EventBase` and internal state changes via `SEventBase`.\n- **Logging and Debugging**: Built-in logging support using `ILogger`.\n\n---\n\n## 3. Technical Architecture\nThe framework is built on the following technologies:\n- **.NET 8.0 SDK**: Core runtime for the application.\n- **ABP Framework 8.2.0**: Modular application framework for infrastructure and dependency injection.\n- **Orleans 7.0**: Distributed virtual actor model for stateful and scalable agent management.\n- **Orleans Event Sourcing**: Manages state changes as events for replayability and consistency.\n- **Orleans Streams**: Facilitates real-time communication between agents and external systems.\n\nAgents are implemented as classes inheriting from `GAgentBase<TState, TEvent>`, where:\n- `TState` defines the agent's persistent state.\n- `TEvent` defines the event types for state transitions.\n\n---\n\n## 4. Main APIs or Interfaces\n- **StateBase**: Base class for defining agent-specific state.\n- **SEventBase**: Base class for event sourcing types.\n- **EventBase**: Base class for external events received by agents.\n- **GAgentBase<TState, TEvent>**: Core agent class for implementing custom agents.\n- **EventHandler Attribute**: Marks methods that handle specific events.\n- **StorageProvider and LogConsistencyProvider Attributes**: Configure storage and consistency mechanisms for agents.\n\nExample Agent Workflow:\n1. Define the agent's state by inheriting from `StateBase`.\n2. Define event sourcing types by inheriting from `SEventBase`.\n3. Define external events by inheriting from `EventBase`.\n4. Implement the agent by inheriting from `GAgentBase<TState, TEvent>` and defining event handlers.\n\n---\n\n## 5. Important Technical Details and Dependencies\n### Prerequisites:\n- **.NET 8.0 SDK**: Required for development.\n- **ABP 8.2.0**, **Orleans 7.0**, **Orleans Event Sourcing**, **Orleans Streams**: Core frameworks for agent functionality.\n\n### Dependency Packages:\n- `Aevatar.Core` (v1.0.2)\n- `Aevatar.EventSourcing.Core` (v1.0.2)\n- `Aevatar.Core.Abstractions` (v1.0.2)  \nAll dependencies are hosted on a private NuGet feed: `https://www.myget.org/F/aelf-project-dev/api/v3/index.json`.\n\n### Key Attributes:\n- `[GenerateSerializer]` and `[Id(x)]`: Required for serialization of state and events.\n- `[EventHandler]`: Required for event-handling methods.\n- `[StorageProvider]` and `[LogConsistencyProvider]`: Configure storage and logging for agents.\n\n---\n\n## License\nThe project is distributed under the MIT License.\n```"
  }
}